
Comments on hexifence Project Part B
   by Tessa Song (songt) and Nihal Mirpuri (nmirpuri)



• STRUCTURE OF CODE
- Board
This is a class which represents the whole board and this includes 
major functions which gives useful information for calculating utility values
for 'Player' agent.
After a new board object is created, every time a new move is made on the board,
setBoard(Move move) function is called to update the board configuration 
and every time a move is undone, undoMove(Move move) is called to cancel the move 
and synchronize the board state. 

- Tile
A single 'tile' on the board, holds information about
what kind of tile it is (eg. R, B, + or -) and the number
of hexes that can be captured by capturing this Tile

- SongtNmirpuri
This is the agent which implements 'Player' and 'Piece'.
All functions to communicate with Referee were implemented and this
includes major functions to implement the approach taken (Refer to 'Approach Taken' below)



• APPROACH TAKEN
- Search Strategy
The main strategy to build this rational agent is minimax search tree with alpha beta
pruning since this game is run by two competitive players. 
An appropriate depth limit is set to satisfy the memory and time limit.

- Evaluation Function
The features to consist of our evaluation functions are number of hexs captured by either
player or opponent and the number of 

- Creative Techniques
In order to build the best evaluation function described above, genetic algorithm is applied
especially for improving 'weights'



• LIBRARIES USE
No external libraries were used in this program



